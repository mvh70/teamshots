---
description: Task-Focused Code Implementation Guidelines
globs: **/*.py, app/**/*.py, api/**/*.py, **/*.tsx, **/*.ts, src/**/*.ts, src/**/*.tsx
---
# Task-Focused Code Implementation Guidelines

## Core Principle: Work Only on the Task at Hand
- **Make only changes directly related to the current task**
- **Do not modify, rewrite, or delete existing code that is unrelated to the task**
- **Preserve all existing functionality unless explicitly required to change it**
- **Do not refactor working code unless it's necessary for the current task**

## Preserve Existing Code Structure
- **Never delete or rewrite existing comments** unless they are factually incorrect and directly related to the task
- **Do not reformat existing code** unless it's required for the current implementation
- **Maintain existing naming conventions** and patterns in the codebase
- **Preserve existing error handling** unless the task specifically requires changes
- **Keep existing imports and dependencies** unless the task requires adding new ones

## Minimal Impact Changes
- **Make the smallest possible changes** to achieve the task requirements
- **Avoid touching files that don't need modification** for the current task
- **Do not "improve" or "clean up" unrelated code** during task implementation
- **Respect existing architectural patterns** and don't introduce new patterns unless required
- **Maintain existing type definitions** unless the task specifically requires type changes

## Task-Specific Implementation
- **Focus implementation on the exact requirements** stated in the task
- **Do not add features or functionality** beyond what the task specifies
- **Avoid premature optimization** or performance improvements not requested
- **Implement only what is needed** to complete the current task successfully
- **Use existing utility functions and patterns** rather than creating new ones
- **Implement complete functionality** - no TODOs, placeholders, or incomplete code

## Complete Code Development
- **Never add TODO comments** or incomplete implementations
- **Write fully functional code** that works as intended
- **Implement all required error handling** and edge cases
- **Complete all necessary validations** and business logic
- **Ensure code is production-ready** and doesn't require future work
- **Handle all possible scenarios** that the task requires

## Code Quality Preservation
- **Verify information before making changes** to avoid breaking working code
- **Test assumptions against existing code** before implementing changes
- **Preserve existing error handling patterns** unless the task requires changes
- **Maintain existing security measures** and don't introduce vulnerabilities
- **Keep existing validation logic** unless the task specifically requires modification

## Change Management
- **Make file-by-file changes** and allow review between files
- **Provide single chunk edits** instead of multiple-step instructions
- **Do not invent changes** beyond what's explicitly requested
- **Avoid unnecessary confirmations** for information already provided
- **Do not suggest updates** to files that don't need modification

## Type Safety
- **Use proper TypeScript types** instead of `any` for type safety
- **Prefer `unknown` over `any`** when the type is not known
- **Maintain existing type definitions** unless the task requires changes
- **Preserve existing interfaces** and don't modify them unless necessary

## Documentation and Comments
- **Do not rewrite existing comments** unless they are factually incorrect
- **Preserve existing documentation** unless the task requires updates
- **Add comments only when necessary** for the current task implementation
- **Maintain existing code documentation patterns**

## Testing and Validation
- **Ensure changes don't break existing functionality** before completing
- **Verify that existing tests still pass** after making changes
- **Do not modify existing test files** unless the task requires it
- **Maintain existing test patterns** and coverage

## Error Prevention
- **Check for existing similar implementations** before creating new code
- **Reuse existing patterns and utilities** when possible
- **Avoid duplicating functionality** that already exists
- **Maintain consistency** with existing codebase patterns
- **Preserve existing configuration** unless the task requires changes

## Don't be lazy
- When you face an error or an issue and you have failed multiple times to repair it without success, do not go for a simpler solution. Research the issue and come up with 3 hypotheses. Investigate each, and choose the most plausible one. If that doesnt work, evaluate the remaining hypotheses and choose the next best one. Rinse and repeat.